name: Build VHACD Universal Binary

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        brew install cmake
    
    - name: Fix CMakeLists.txt version requirement
      run: |
        cd src
        # 备份原文件
        cp CMakeLists.txt CMakeLists.txt.backup
        
        # 修改CMake版本要求从3.0.0改为3.5.0
        sed -i '' 's/cmake_minimum_required(VERSION 3.0.0 FATAL_ERROR)/cmake_minimum_required(VERSION 3.5.0 FATAL_ERROR)/' CMakeLists.txt
        
        echo "=== Modified CMakeLists.txt ==="
        head -5 CMakeLists.txt
    
    - name: Create missing cmake_common.cmake
      run: |
        cd src
        mkdir -p ../scripts
        cat > ../scripts/cmake_common.cmake << 'EOF'
        # Auto-generated cmake_common.cmake for VHACD build
        
        # Common settings
        set(CMAKE_CXX_STANDARD 11)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)
        
        # Platform-specific settings
        if(APPLE)
            set(CMAKE_MACOSX_RPATH ON)
        endif()
        
        # Collect source files for VHACD_Lib
        file(GLOB_RECURSE PROJECT_CPP_FILES "${CMAKE_CURRENT_SOURCE_DIR}/*.cpp")
        file(GLOB_RECURSE PROJECT_C_FILES "${CMAKE_CURRENT_SOURCE_DIR}/*.c")
        file(GLOB_RECURSE PROJECT_INC_FILES "${CMAKE_CURRENT_SOURCE_DIR}/inc/*.h")
        file(GLOB_RECURSE PROJECT_INL_FILES "${CMAKE_CURRENT_SOURCE_DIR}/inc/*.inl")
        file(GLOB_RECURSE PROJECT_CL_FILES "${CMAKE_CURRENT_SOURCE_DIR}/*.cl")
        
        # Add public headers too
        file(GLOB_RECURSE PROJECT_PUB_FILES "${CMAKE_CURRENT_SOURCE_DIR}/public/*.h")
        list(APPEND PROJECT_INC_FILES ${PROJECT_PUB_FILES})
        EOF
        
        echo "Created cmake_common.cmake"
    
    - name: Configure CMake
      run: |
        cd src
        mkdir -p build
        cd build
        
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
          -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
          -DNO_OPENCL=ON \
          -DNO_OPENMP=OFF
    
    - name: Build VHACD
      run: |
        cd src/build
        cmake --build . --config Release -j$(sysctl -n hw.ncpu)
    
    - name: Find and verify libraries
      run: |
        echo "=== Searching for built libraries ==="
        find src/build -name "*vhacd*" -type f 2>/dev/null || echo "No vhacd files found"
        find src/build -name "*.dylib" 2>/dev/null || echo "No .dylib files found"
        find src/build -name "*.a" 2>/dev/null || echo "No .a files found"
        
        echo "=== Checking library architectures ==="
        find src/build -name "*.dylib" -exec file {} \; 2>/dev/null || true
        find src/build -name "*.dylib" -exec lipo -info {} \; 2>/dev/null || true
        find src/build -name "*.a" -exec file {} \; 2>/dev/null || true
        find src/build -name "*.a" -exec lipo -info {} \; 2>/dev/null || true
    
    - name: Package artifacts
      run: |
        mkdir -p artifacts
        
        # 复制库文件
        find src/build -name "*vhacd*" -name "*.dylib" -exec cp {} artifacts/ \; 2>/dev/null || true
        find src/build -name "*vhacd*" -name "*.a" -exec cp {} artifacts/ \; 2>/dev/null || true
        find src/build -name "libvhacd.*" -exec cp {} artifacts/ \; 2>/dev/null || true
        
        # 复制头文件
        mkdir -p artifacts/include
        if [ -d "src/VHACD_Lib/inc" ]; then
          cp -r src/VHACD_Lib/inc/* artifacts/include/
        fi
        if [ -d "src/VHACD_Lib/public" ]; then
          cp -r src/VHACD_Lib/public/* artifacts/include/
        fi
        
        echo "=== Final artifacts ==="
        find artifacts -type f
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: vhacd-macos-universal
        path: artifacts/
        retention-days: 30

  # 备用构建：尝试构建动态库
  build-shared:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Fix CMake version and build shared lib
      run: |
        cd src
        
        # 修改CMake版本
        sed -i '' 's/cmake_minimum_required(VERSION 3.0.0 FATAL_ERROR)/cmake_minimum_required(VERSION 3.5.0 FATAL_ERROR)/' CMakeLists.txt
        
        # 创建cmake_common.cmake
        mkdir -p ../scripts
        cat > ../scripts/cmake_common.cmake << 'EOF'
        file(GLOB_RECURSE PROJECT_CPP_FILES "${CMAKE_CURRENT_SOURCE_DIR}/*.cpp")
        file(GLOB_RECURSE PROJECT_C_FILES "${CMAKE_CURRENT_SOURCE_DIR}/*.c") 
        file(GLOB_RECURSE PROJECT_INC_FILES "${CMAKE_CURRENT_SOURCE_DIR}/inc/*.h" "${CMAKE_CURRENT_SOURCE_DIR}/public/*.h")
        file(GLOB_RECURSE PROJECT_INL_FILES "${CMAKE_CURRENT_SOURCE_DIR}/inc/*.inl")
        file(GLOB_RECURSE PROJECT_CL_FILES "${CMAKE_CURRENT_SOURCE_DIR}/*.cl")
        EOF
        
        mkdir -p build-shared && cd build-shared
        
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
          -DBUILD_SHARED_LIBS=ON \
          -DNO_OPENCL=ON \
          -DNO_OPENMP=OFF
        
        cmake --build . --config Release -j$(sysctl -n hw.ncpu)
    
    - name: Package shared library
      run: |
        mkdir -p artifacts-shared
        find src/build-shared -name "*.dylib" -exec cp {} artifacts-shared/ \; 2>/dev/null || true
        find src/build-shared -name "*.a" -exec cp {} artifacts-shared/ \; 2>/dev/null || true
        
        # 添加头文件
        mkdir -p artifacts-shared/include
        cp -r src/VHACD_Lib/inc/* artifacts-shared/include/ 2>/dev/null || true
        cp -r src/VHACD_Lib/public/* artifacts-shared/include/ 2>/dev/null || true
        
        # 验证架构
        find artifacts-shared -name "*.dylib" -exec lipo -info {} \; 2>/dev/null || true
        
        ls -la artifacts-shared/
    
    - name: Upload shared library
      uses: actions/upload-artifact@v4
      with:
        name: vhacd-shared-macos-universal
        path: artifacts-shared/
        retention-days: 30